{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-types.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-types.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/./src/shipping/shipping-country-action-types.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/./src/payment/strategies/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-client.ts","webpack://checkoutKit/./src/checkout/create-checkout-client.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/index.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","CustomerStrategyActionType","ShippingStrategyActionType","LOAD_PAYMENT_METHODS_REQUESTED","LOAD_PAYMENT_METHODS_SUCCEEDED","LOAD_PAYMENT_METHODS_FAILED","LOAD_PAYMENT_METHOD_REQUESTED","LOAD_PAYMENT_METHOD_SUCCEEDED","LOAD_PAYMENT_METHOD_FAILED","INITIALIZE_REMOTE_BILLING_REQUESTED","INITIALIZE_REMOTE_BILLING_SUCCEEDED","INITIALIZE_REMOTE_BILLING_FAILED","INITIALIZE_REMOTE_SHIPPING_REQUESTED","INITIALIZE_REMOTE_SHIPPING_SUCCEEDED","INITIALIZE_REMOTE_SHIPPING_FAILED","INITIALIZE_REMOTE_PAYMENT_REQUESTED","INITIALIZE_REMOTE_PAYMENT_SUCCEEDED","INITIALIZE_REMOTE_PAYMENT_FAILED","LOAD_REMOTE_SETTINGS_REQUESTED","LOAD_REMOTE_SETTINGS_SUCCEEDED","LOAD_REMOTE_SETTINGS_FAILED","SIGN_OUT_REMOTE_CUSTOMER_REQUESTED","SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED","SIGN_OUT_REMOTE_CUSTOMER_FAILED","UPDATE_REMOTE_CHECKOUT","LOAD_SHIPPING_COUNTRIES_REQUESTED","LOAD_SHIPPING_COUNTRIES_SUCCEEDED","LOAD_SHIPPING_COUNTRIES_FAILED","ConfigActionType","BillingAddressActionCreator","_checkoutClient","this","updateAddress","address","options","_this","store","Observable_","observer","next","data_store_","billing_address_actions","UpdateBillingAddressRequested","_requestBillingAddressUpdate","then","_a","body","UpdateBillingAddressSucceeded","complete","catch","response","error","UpdateBillingAddressFailed","state","getState","checkout","getCheckout","missing_data_error","MissingCheckout","billingAddress","getBillingAddress","billingAddressRequestBody","external_tslib_","email","id","updateBillingAddress","createBillingAddress","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","CountryActionCreator","loadCountries","data","PaymentStrategyActionType","_super","OrderFinalizationNotRequiredError","type","standard_error","PaymentActionType","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","executeAction","strategy","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","MissingPaymentMethod","getByMethod","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","concat_","_loadOrderPaymentsIfNeeded","finalize","finalizeAction","getPaymentId","order_finalization_not_required_error","providerId","FinalizeRequested","gateway","FinalizeSucceeded","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","orderId","from_","loadCurrentOrderPayments","empty_","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","PaymentActionCreator","_paymentRequestSender","submitPayment","SubmitPaymentRequested","_getPaymentRequestBody","SubmitPaymentSucceeded","SubmitPaymentFailed","loadCurrentOrder","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","config","getStoreConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","source","storeProfile","paymentMethodSelector","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","headers","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","hasFactory","payment_method_types","_isLegacyMethod","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","message","join","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","getContextConfig","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","DEFAULT_RESPONSE","RequestError","_b","_c","errors","Array","isArray","reduce","result","concat","joinErrors","detail","title","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","onReady","document","getElementById","OffAmazonPayments","walletOptions","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","amazonOrderReferenceId","onOrderReferenceCreate","updateCheckout","getAmazonOrderReferenceId","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","internalBillingAddress","is_address_equal","map_from_internal_address","CreditCardPaymentStrategy","PaymentMethodCancelledError","PaymentMethodInvalidError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","getPaymentStatus","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadScript","_paypalSdk","paypal","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","initXO","redirectUrl","getPaymentRedirectUrl","startFlow","location","assign","SagePayPaymentStrategy","_formPoster","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","TimeoutError","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_requestSender","createSquareForm","_paymentForm","_getFormOptions","build","paymentName","paymentPayload_1","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","initializationData","callbacks","paymentFormLoaded","postalCode","setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","_setExternalCheckoutData","_paymentInstrumentSelected","_cardNonceResponseReceived","methodsSupported","createPaymentRequest","storeConfig","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","subtotal","toString","pending","all","loadCurrentCheckout","queueId","Accept","Content-Type","to_form_url_encoded","JSON","stringify","post","NoPaymentDataRequiredPaymentStrategy","orderRequest","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","locale","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","Error","handleSuccess","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","country","endpoint","KlarnaScriptLoader","Klarna","Credit","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","requestSender","request_sender_","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","billing_address_action_creator","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","sage_pay_payment_strategy","form_poster_","square_payment_strategy","checkout_action_creator","payment_strategy_action_creator","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","wepay_payment_strategy","wepay_risk_client","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","expires_at","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","map","bigpayToken","bigpay_token","provider","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","timeout","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_config","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","geoCountryCode","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getCreateError","getApplyError","getRemoveError","getDeleteError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isCreating","isApplying","isRemoving","isDeleting","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","subtype","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","updateConsignment","consignment","selectConsignmentShippingOption","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","DEFAULT_PARAMS","include","BillingAddressRequestSender","createAddress","checkoutId","url","content_type","JsonV1","params","put","CountryRequestSender","Accept-Language","PaymentMethodRequestSender","CheckoutClient","_billingAddressRequestSender","_countryRequestSender","_customerRequestSender","_orderRequestSender","_paymentMethodRequestSender","_shippingCountryRequestSender","createCheckoutClient","billingAddressRequestSender","billing_address_request_sender","countryRequestSender","country_request_sender","customerRequestSender","customer_request_sender","orderRequestSender","order_request_sender","paymentMethodRequestSender","payment_method_request_sender","shippingCountryRequestSender","shipping_country_request_sender","checkout_client","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","createError","_getType","default","DEFAULT_STATE","billingAddressReducer","dataReducer","errorsReducer","statusesReducer","reducer","checkout_actions","LoadCheckoutSucceeded","order_actions","LoadOrderSucceeded","LoadCheckoutRequested","loadError","LoadCheckoutFailed","updateError","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_action_types","array","item","predicate","index","newArray","slice","push","mergeOrPush","loadMethodId","loadMethodError","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","initializeError","initializeMethodId","deinitializeError","deinitializeMethodId","executeError","executeMethodId","finalizeError","finalizeMethodId","widgetInteractionError","widgetInteractionMethodId","isDeinitializing","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","deleteError","failedInstrument","deletingInstrument","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_action_types","shipping","checkout_reducer_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","UpdateCheckoutSucceeded","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","consignment_actions","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","UpdateShippingOptionSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","SubmitOrderSucceeded","UpdateCheckoutRequested","UpdateCheckoutFailed","BillingAddressSelector","createFreezeProxy","target","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","forEach","charAt","createProxy","args","ConfigSelector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","fieldType","itemtype","subdivisions","required","hasPostalCodes","CountrySelector","PaymentMethodSelector","PaymentStrategySelector","getWidgetInteractingError","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","step","storeCredit","payments","providerType","InstrumentSelector","RemoteCheckoutSelector","_remoteCheckout","CheckoutSelector","createInternalCheckoutSelectors","billing_address_selector","cart_selector","config_selector","consignment_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","checkout_selector","order_selector","payment_selector","shouldWarnMutation","keys","createFreezeProxies","createCheckoutStore","initialState","actionTransformer","requestErrorFactory","action$","pipe","operators_","every","isResponse","createActionTransformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","createCheckoutService","protocol","log","warn","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","consignmentRequestSender","consignment_request_sender","checkout_service","consignment_action_creator","country_action_creator","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_strategy_action_creator","create_shipping_strategy_registry","CustomerActionType","mapToInternalLineItems","itemMap","decimalPlaces","idKey","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","__webpack_exports__","HOSTED","OFFLINE","ConsignmentActionType","CouponActionType","standard_error_StandardError","StandardError","setPrototypeOf","__proto__","_newTarget","captureStackTrace","stack","GiftCertificateActionType","mapGiftCertificateToInternalLineItem","amountTransformer","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","option","mapToInternalCart","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotions","notifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","CacheKeyResolver","_lastId","_maps","getKey","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","getUsedCount","isMatched","parentMaps_1","maps","CheckoutActionType","OrderActionType","CheckoutRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","bindDecorator","descriptor","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","set","objectA","objectB","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keyFilter","keysA","keysB","length_2","isObjectEqual","selectorDecorator","resolver","cache_key_resolver","memoizedMethod","cachedValue","newValue","is_private","cache","selectorMethodDecorator","BillingAddressActionType","CheckoutActionCreator","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","_loadCheckout","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_4__","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","ConsignmentActionCreator","_consignmentRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","consignmentUpdateBody","consignmentMeta","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","tslib__WEBPACK_IMPORTED_MODULE_0__","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","_createOrUpdateConsignment","CreateConsignmentsRequested","CreateConsignmentsFailed","_isUpdateShippingOptionRequest","_updateShippingOption","UpdateConsignmentRequested","UpdateConsignmentFailed","consignmentMeta_1","itemId","CustomerActionCreator","signInAction","_customer_actions__WEBPACK_IMPORTED_MODULE_3__","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutAction","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","mapToInternalCustomer","addresses","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","indexOf","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","lodash__WEBPACK_IMPORTED_MODULE_0__","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderToken","callbackUrl","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","find","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","BraintreeScriptLoader","loadClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","load3DS","loadDataCollector","dataCollector","loadPaypal","loadVisaCheckout","BraintreeSDKCreator","_braintreeScriptLoader","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","_dataCollector","kount","parse","device_session_id","getVisaCheckout","_visaCheckout","_teardown","mod","CustomerRequestSender","delete","OrderRequestSender","ShippingCountryRequestSender","CartSelector","_common_selector__WEBPACK_IMPORTED_MODULE_1__","ConsignmentSelector","loadShippingOptionsError","lodash__WEBPACK_IMPORTED_MODULE_1__","updateShippingOptionError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_customer__WEBPACK_IMPORTED_MODULE_3__","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","FinalizeOrderSucceeded","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_action_types__WEBPACK_IMPORTED_MODULE_2__","ConsignmentRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","OrderActionCreator","_order_actions__WEBPACK_IMPORTED_MODULE_6__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","_loadOrderPayments","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","cartAmount","productId","giftWrapping","CouponActionCreator","_couponRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","CustomerStrategyActionCreator","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","mapFromInternalAddress","ShippingCountryActionCreator","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","mergedOptions","ChasePayScriptLoader","JPMC","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","_createSignInButton","not_implemented_error","Button","color","size","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","style","visibility","containerId","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","createElement","className","innerHTML","appendChild","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","isChasePayUp","insertButtons","containers","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","createCustomerStrategyRegistry","remoteCheckoutRequestSender","checkoutActionCreator","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","chasepay_script_loader","default_customer_strategy","customer_action_creator","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","_handleOrderReferenceCreate","shipping_strategy_actions","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","amazon_pay_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isAddressEqual","addressA","addressB","normalize","ignoredKeys","ConsoleLogger","_console","messages","_logToConsole","info","debug","NoopLogger","logger","isEnabled","noop_logger","console_logger","console","createLogger","getDefaultLogger","shippingStrategyReducer","customerStrategyReducer","customer_strategy_actions","isPrivate","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","PaymentMethodActionCreator","_payment_method_action_types__WEBPACK_IMPORTED_MODULE_2__","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","err","createLanguageService","language_service","getEnvironment","process","env","NODE_ENV","e","ContentType","ConfigRequestSender","X-API-INTERNAL","MissingDataErrorType","MissingDataError","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","NotInitializedErrorType","NotInitializedError","Registry","_factories","_instances","_options","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","hasInstance","InvalidArgumentError","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_action_types__WEBPACK_IMPORTED_MODULE_2__","AmazonPayScriptLoader","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","setClientId","clientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","toFormUrlEncoded","encodeURIComponent","VisaCheckoutScriptLoader","V","RemoteCheckoutSynchronizationError","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","String","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","details","userEmail","payment_type","device_data","card_information","_getCardInformation","billing_address","_getAddress","shipping_address","phoneNumber","extendedAddress","locality","first_name","last_name","phone_number","address_line_1","address_line_2","country_code","postal_code","cardType","lastTwo","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 116);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs/Observable\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","export const LOAD_PAYMENT_METHODS_REQUESTED = 'LOAD_PAYMENT_METHODS_REQUESTED';\nexport const LOAD_PAYMENT_METHODS_SUCCEEDED = 'LOAD_PAYMENT_METHODS_SUCCEEDED';\nexport const LOAD_PAYMENT_METHODS_FAILED = 'LOAD_PAYMENT_METHODS_FAILED';\n\nexport const LOAD_PAYMENT_METHOD_REQUESTED = 'LOAD_PAYMENT_METHOD_REQUESTED';\nexport const LOAD_PAYMENT_METHOD_SUCCEEDED = 'LOAD_PAYMENT_METHOD_SUCCEEDED';\nexport const LOAD_PAYMENT_METHOD_FAILED = 'LOAD_PAYMENT_METHOD_FAILED';\n\nexport const INITIALIZE_PAYMENT_METHOD_REQUESTED = 'INITIALIZE_PAYMENT_METHOD_REQUESTED';\nexport const INITIALIZE_PAYMENT_METHOD_SUCCEEDED = 'INITIALIZE_PAYMENT_METHOD_SUCCEEDED';\nexport const INITIALIZE_PAYMENT_METHOD_FAILED = 'INITIALIZE_PAYMENT_METHOD_FAILED';\n","export const INITIALIZE_REMOTE_BILLING_REQUESTED = 'INITIALIZE_REMOTE_BILLING_REQUESTED';\nexport const INITIALIZE_REMOTE_BILLING_SUCCEEDED = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_BILLING_FAILED = 'INITIALIZE_REMOTE_BILLING_FAILED';\n\nexport const INITIALIZE_REMOTE_SHIPPING_REQUESTED = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED';\nexport const INITIALIZE_REMOTE_SHIPPING_SUCCEEDED = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_SHIPPING_FAILED = 'INITIALIZE_REMOTE_SHIPPING_FAILED';\n\nexport const INITIALIZE_REMOTE_PAYMENT_REQUESTED = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED';\nexport const INITIALIZE_REMOTE_PAYMENT_SUCCEEDED = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED';\nexport const INITIALIZE_REMOTE_PAYMENT_FAILED = 'INITIALIZE_REMOTE_PAYMENT_FAILED';\n\nexport const LOAD_REMOTE_SETTINGS_REQUESTED = 'LOAD_REMOTE_SETTINGS_REQUESTED';\nexport const LOAD_REMOTE_SETTINGS_SUCCEEDED = 'LOAD_REMOTE_SETTINGS_SUCCEEDED';\nexport const LOAD_REMOTE_SETTINGS_FAILED = 'LOAD_REMOTE_SETTINGS_FAILED';\n\nexport const SIGN_OUT_REMOTE_CUSTOMER_REQUESTED = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_FAILED = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED';\n\nexport const UPDATE_REMOTE_CHECKOUT = 'UPDATE_REMOTE_CHECKOUT';\n","module.exports = require(\"@bigcommerce/request-sender\");","module.exports = require(\"rxjs/observable/concat\");","export const LOAD_SHIPPING_COUNTRIES_REQUESTED = 'LOAD_SHIPPING_COUNTRIES_REQUESTED';\nexport const LOAD_SHIPPING_COUNTRIES_SUCCEEDED = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED';\nexport const LOAD_SHIPPING_COUNTRIES_FAILED = 'LOAD_SHIPPING_COUNTRIES_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, CheckoutClient, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _checkoutClient: CheckoutClient\n    ) {}\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            this._requestBillingAddressUpdate(store, address, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _requestBillingAddressUpdate(\n        store: ReadableCheckoutStore,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        // If email is not present in the address provided by the client, then\n        // fall back to the stored email as it could have been set separately\n        // using a convenience method. We can't rely on billingAddress having\n        // an ID to consider that there's a preexisting email, as billingAddress\n        // object from Order doesn't have an ID.\n        const billingAddressRequestBody = {\n            ...address,\n            email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n        };\n\n        if (!billingAddress || !billingAddress.id) {\n            return this._checkoutClient.createBillingAddress(checkout.id, billingAddressRequestBody, options);\n        }\n\n        return this._checkoutClient.updateBillingAddress(checkout.id, {\n            ...billingAddressRequestBody,\n            id: billingAddress.id,\n        }, options);\n    }\n}\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutClient } from '../checkout';\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _checkoutClient: CheckoutClient\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._checkoutClient.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { empty } from 'rxjs/observable/empty';\nimport { from } from 'rxjs/observable/from';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | LoadOrderPaymentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const executeAction = new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n                const state = store.getState();\n                const { payment = {} as Payment, useStoreCredit } = payload;\n                const meta = { methodId: payment.methodId };\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get('nopaymentdatarequired');\n                }\n\n                observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n                strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => {\n                        observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                        observer.complete();\n                    })\n                    .catch(error => {\n                        observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                    });\n            });\n\n            return concat(\n                this._loadOrderPaymentsIfNeeded(store, options),\n                executeAction\n            );\n        };\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction | LoadOrderPaymentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const finalizeAction = new Observable((observer: Observer<PaymentStrategyFinalizeAction>) => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n                const meta = { methodId: payment.providerId };\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                observer.next(createAction(PaymentStrategyActionType.FinalizeRequested, undefined, meta));\n\n                this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => {\n                        observer.next(createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, meta));\n                        observer.complete();\n                    })\n                    .catch(error => {\n                        observer.error(createErrorAction(PaymentStrategyActionType.FinalizeFailed, error, meta));\n                    });\n            });\n\n            return concat(\n                this._loadOrderPaymentsIfNeeded(store, options),\n                finalizeAction\n            );\n        };\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const checkout = store.getState().checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return from(this._orderActionCreator.loadCurrentOrderPayments(options)(store));\n        }\n\n        return empty();\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            Observable.create((observer: Observer<SubmitPaymentAction>) => {\n                observer.next(createAction(PaymentActionType.SubmitPaymentRequested));\n\n                return this._paymentRequestSender.submitPayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(({ body }) => {\n                        observer.next(createAction(PaymentActionType.SubmitPaymentSucceeded, body));\n                        observer.complete();\n                    })\n                    .catch(response => {\n                        observer.error(createErrorAction(PaymentActionType.SubmitPaymentFailed, response));\n                    });\n            }),\n            this._orderActionCreator.loadCurrentOrder()(store)\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const config = state.config.getStoreConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: paymentMeta && paymentMeta.request,\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(config && config.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        return (paymentMethod && paymentMethod.method === 'multi-option' && !paymentMethod.gateway) ?\n            { ...paymentMethod, gateway: paymentMethod.id } :\n            paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this.hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { noop } from 'lodash';\n\nimport { isAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (referenceId) {\n                walletOptions.amazonOrderReferenceId = referenceId;\n            } else {\n                walletOptions.onOrderReferenceCreate = orderReference => {\n                    if (!this._paymentMethod) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    this._store.dispatch(\n                        this._remoteCheckoutActionCreator.updateCheckout(this._paymentMethod.id as 'amazon', {\n                            referenceId: orderReference.getAmazonOrderReferenceId(),\n                        })\n                    );\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = payment && payment.gatewayId === 'adyen' ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport PaymentMethod from '../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk: any;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: ScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                this._paypalSdk = (window as any).paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = null;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        this._paypalSdk.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    this._paypalSdk.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                this._paypalSdk.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodActionCreator, PaymentStrategyActionCreator } from '../../index';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, { CardData, Contact, Error, SquareFormElement, SquareFormOptions } from './square-form';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _paymentForm?: SquarePaymentForm;\n    private _deferredRequestNonce?: DeferredPromise;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment || !payment.methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paymentName = payment.methodId;\n\n        if ((payment.paymentData as NonceInstrument).nonce) {\n            const paymentPayload = {\n                methodId: paymentName,\n                paymentData: {token: (payment.paymentData as NonceInstrument).nonce},\n            };\n\n            return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload))\n            );\n        } else {\n            return new Promise<NonceInstrument>((resolve, reject) => {\n                if (!this._paymentForm) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                if (this._deferredRequestNonce) {\n                    this._deferredRequestNonce.reject(new TimeoutError());\n                }\n\n                this._deferredRequestNonce = { resolve, reject };\n                this._paymentForm.requestCardNonce();\n            })\n            .then(paymentData => {\n                const paymentPayload = {\n                    methodId: paymentName,\n                    paymentData,\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n                    .then(() =>\n                        this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload))\n                    );\n            });\n        }\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!squareOptions || !paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        return {\n            ...squareOptions,\n            ...paymentMethod.initializationData,\n            callbacks: {\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    const state = this._store.getState();\n                    const billingAddress = state.billingAddress.getBillingAddress();\n\n                    if (!this._paymentForm) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (billingAddress && billingAddress.postalCode) {\n                        this._paymentForm.setPostalCode(billingAddress.postalCode);\n                    }\n                },\n                unsupportedBrowserDetected: () => {\n                    deferred.reject(new UnsupportedBrowserError());\n                },\n                cardNonceResponseReceived: (errors: Error[], nonce: string, cardData: CardData,\n                                            billingContact: Contact, shippingContact: Contact) => {\n                    if (cardData.digital_wallet_type !== 'NONE') {\n                        this._setExternalCheckoutData(cardData, nonce)\n                        .then(() => {\n                            this._paymentInstrumentSelected(nonce, cardData)\n                            .then(() => {\n                                if (squareOptions.onPaymentSelect) {\n                                    squareOptions.onPaymentSelect();\n                                }\n                            });\n                        });\n                    } else {\n                        this._cardNonceResponseReceived(errors, nonce);\n                    }\n                },\n                methodsSupported: () => {},\n\n                /*\n                 * callback function: createPaymentRequest\n                 * Triggered when: a digital wallet payment button is clicked.\n                */\n                createPaymentRequest: () => {\n                    const state = this._store.getState();\n                    const checkout = state.checkout.getCheckout();\n                    const storeConfig = state.config.getStoreConfig();\n\n                    if (!checkout) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                    }\n\n                    if (!storeConfig) {\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                    }\n\n                    return {\n                        requestShippingAddress: true,\n                        requestBillingInfo: true,\n                        currencyCode: storeConfig.currency.code,\n                        countryCode: 'US',\n                        total: {\n                            label: storeConfig.storeProfile.storeName,\n                            amount: checkout.subtotal.toString(),\n                            pending: false,\n                        },\n                    };\n                },\n            },\n        };\n    }\n\n    private _paymentInstrumentSelected(nonce: string, cardData: CardData) {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n                return Promise.all([\n                    this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                    this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod('squarev2')),\n                ]);\n        }, { methodId: 'squarev2' }), { queueId: 'widgetInteraction' });\n    }\n\n    private _cardNonceResponseReceived(errors: Error[], nonce: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors) {\n            this._deferredRequestNonce.reject(errors);\n        } else {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _setExternalCheckoutData(cardData: CardData, nonce: string): Promise<Response> {\n        const url = `checkout.php?provider=squarev2&action=set_external_checkout`;\n        const options = {\n          headers: {\n            Accept: 'text/html',\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n          },\n          body: toFormUrlEncoded({\n              nonce: { nonce },\n              cardData: JSON.stringify(cardData),\n          }),\n        };\n\n        return this._requestSender.post(url, options);\n      }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n\n/**\n * A set of options that are required to initialize the Square payment method.\n *\n * Once Square payment is initialized, credit card form fields, provided by the\n * payment provider as iframes, will be inserted into the current page. These\n * options provide a location and styling for each of the form fields.\n */\nexport interface SquarePaymentInitializeOptions {\n    /**\n     * The location to insert the credit card number form field.\n     */\n    cardNumber: SquareFormElement;\n\n    /**\n     * The location to insert the CVV form field.\n     */\n    cvv: SquareFormElement;\n\n    /**\n     * The location to insert the expiration date form field.\n     */\n    expirationDate: SquareFormElement;\n\n    /**\n     * The location to insert the postal code form field.\n     */\n    postalCode: SquareFormElement;\n\n    /**\n     * The CSS class to apply to all form fields.\n     */\n    inputClass?: string;\n\n    /**\n     * The set of CSS styles to apply to all form fields.\n     */\n    inputStyles?: Array<{ [key: string]: string }>;\n\n    // Initialize Masterpass placeholder ID\n    masterpass?: SquareFormElement;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { CheckoutActionCreator, CheckoutClient, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    client: CheckoutClient,\n    paymentClient: any\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const requestSender = createRequestSender();\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(client, checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(client);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(createRequestSender())\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            new BillingAddressActionCreator(client),\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            scriptLoader\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            scriptLoader\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new PaymentStrategyActionCreator(registry, orderActionCreator),\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n            paymentMethodActionCreator,\n            new PaymentStrategyActionCreator(registry, orderActionCreator),\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the current customer is updating their billing address.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the current customer is updating their shipping address.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    CustomerStrategyActionCreator,\n    GuestCredentials\n} from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport {\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport {\n    ConsignmentsRequestBody,\n    ConsignmentActionCreator,\n    ShippingCountryActionCreator,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    ShippingStrategyActionCreator,\n} from '../shipping';\nimport { ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.checkout.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.checkout.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.checkout.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.checkout.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.checkout.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.checkout.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.checkout.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.checkout.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.checkout.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.checkout.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.checkout.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.checkout.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.checkout.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.checkout.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.checkout.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.checkout.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.checkout.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.checkout.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments, address);\n     *\n     * console.log(state.checkout.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignmentId, address);\n     *\n     * console.log(state.checkout.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.checkout.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.checkout.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: AddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.checkout.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.checkout.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { PaymentMethodsResponseBody, PaymentMethodResponseBody } from './payment-method-responses';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethodsResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethodResponseBody>> {\n        const url = `/internalapi/v1/checkout/payments/${methodId}`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { BillingAddressRequestSender, BillingAddressUpdateRequestBody } from '../billing';\nimport { RequestOptions } from '../common/http-request';\nimport { CustomerCredentials, CustomerRequestSender } from '../customer';\nimport { CountryRequestSender, CountryResponseBody } from '../geography';\nimport { InternalOrderRequestBody, InternalOrderResponseBody, Order, OrderRequestSender } from '../order';\nimport { PaymentMethodsResponseBody, PaymentMethodRequestSender, PaymentMethodResponseBody } from '../payment';\nimport { ShippingCountryRequestSender } from '../shipping';\n\nimport Checkout from './checkout';\n\n/**\n * @deprecated Use request senders directly\n */\nexport default class CheckoutClient {\n    /**\n     * @internal\n     */\n    constructor(\n        private _billingAddressRequestSender: BillingAddressRequestSender,\n        private _countryRequestSender: CountryRequestSender,\n        private _customerRequestSender: CustomerRequestSender,\n        private _orderRequestSender: OrderRequestSender,\n        private _paymentMethodRequestSender: PaymentMethodRequestSender,\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Promise<Response<Order>> {\n        return this._orderRequestSender.loadOrder(orderId, options);\n    }\n\n    submitOrder(body: InternalOrderRequestBody, options?: RequestOptions): Promise<Response<InternalOrderResponseBody>> {\n        return this._orderRequestSender.submitOrder(body, options);\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Promise<Response<InternalOrderResponseBody>> {\n        return this._orderRequestSender.finalizeOrder(orderId, options);\n    }\n\n    loadPaymentMethods(options?: RequestOptions): Promise<Response<PaymentMethodsResponseBody>> {\n        return this._paymentMethodRequestSender.loadPaymentMethods(options);\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<Response<PaymentMethodResponseBody>> {\n        return this._paymentMethodRequestSender.loadPaymentMethod(methodId, options);\n    }\n\n    loadCountries(options?: RequestOptions): Promise<Response<CountryResponseBody>> {\n        return this._countryRequestSender.loadCountries(options);\n    }\n\n    loadShippingCountries(options?: RequestOptions): Promise<Response<CountryResponseBody>> {\n        return this._shippingCountryRequestSender.loadCountries(options);\n    }\n\n    createBillingAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, options?: RequestOptions): Promise<Response<Checkout>> {\n        return this._billingAddressRequestSender.createAddress(checkoutId, address, options);\n    }\n\n    updateBillingAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, options?: RequestOptions): Promise<Response> {\n        return this._billingAddressRequestSender.updateAddress(checkoutId, address, options);\n    }\n\n    signInCustomer(credentials: CustomerCredentials, options?: RequestOptions): Promise<Response> {\n        return this._customerRequestSender.signInCustomer(credentials, options);\n    }\n\n    signOutCustomer(options?: RequestOptions): Promise<Response> {\n        return this._customerRequestSender.signOutCustomer(options);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressRequestSender } from '../billing';\nimport { CustomerRequestSender } from '../customer';\nimport { CountryRequestSender } from '../geography';\nimport { OrderRequestSender } from '../order';\nimport { PaymentMethodRequestSender } from '../payment';\nimport { ShippingCountryRequestSender } from '../shipping';\n\nimport CheckoutClient from './checkout-client';\n\nexport default function createCheckoutClient(config: { locale?: string } = {}): CheckoutClient {\n    const requestSender = createRequestSender();\n\n    const billingAddressRequestSender = new BillingAddressRequestSender(requestSender);\n    const countryRequestSender = new CountryRequestSender(requestSender, config);\n    const customerRequestSender = new CustomerRequestSender(requestSender);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const paymentMethodRequestSender = new PaymentMethodRequestSender(requestSender);\n    const shippingCountryRequestSender = new ShippingCountryRequestSender(requestSender, config);\n\n    return new CheckoutClient(\n        billingAddressRequestSender,\n        countryRequestSender,\n        customerRequestSender,\n        orderRequestSender,\n        paymentMethodRequestSender,\n        shippingCountryRequestSender\n    );\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport * as actionTypes from './payment-method-action-types';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function paymentMethodReducer(state: PaymentMethodState = DEFAULT_STATE, action: Action): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentMethod[] | undefined, action: Action): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_PAYMENT_METHOD_SUCCEEDED:\n        return mergeOrPush(data || [], action.payload.paymentMethod as PaymentMethod, {\n            id: action.payload.paymentMethod.id,\n            gateway: action.payload.paymentMethod.gateway,\n        });\n\n    case actionTypes.LOAD_PAYMENT_METHODS_SUCCEEDED:\n        return action.payload && action.payload.paymentMethods ? action.payload.paymentMethods : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: PaymentMethodMeta | undefined, action: Action): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_PAYMENT_METHODS_SUCCEEDED:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: PaymentMethodErrorsState = DEFAULT_STATE.errors, action: Action): PaymentMethodErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_PAYMENT_METHODS_REQUESTED:\n    case actionTypes.LOAD_PAYMENT_METHODS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_PAYMENT_METHODS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.LOAD_PAYMENT_METHOD_REQUESTED:\n    case actionTypes.LOAD_PAYMENT_METHOD_SUCCEEDED:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case actionTypes.LOAD_PAYMENT_METHOD_FAILED:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses, action: Action): PaymentMethodStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_PAYMENT_METHODS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_PAYMENT_METHODS_SUCCEEDED:\n    case actionTypes.LOAD_PAYMENT_METHODS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.LOAD_PAYMENT_METHOD_REQUESTED:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case actionTypes.LOAD_PAYMENT_METHOD_SUCCEEDED:\n    case actionTypes.LOAD_PAYMENT_METHOD_FAILED:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T extends object>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\ntype RemoteCheckout = AfterpayRemoteCheckout | AmazonPayRemoteCheckout;\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: Action\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = {},\n    action: Action\n): RemoteCheckout {\n    switch (action.type) {\n    case actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED:\n        return { ...data, billing: action.payload.billing };\n\n    case actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED:\n        return { ...data, shipping: action.payload.shipping };\n\n    case actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED:\n        return { ...data, settings: action.payload };\n\n    case actionTypes.UPDATE_REMOTE_CHECKOUT:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { PaymentSelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const config = new ConfigSelector(state.config);\n    const consignments = new ConsignmentSelector(state.consignments);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport {\n    CouponActionCreator,\n    CouponRequestSender,\n    GiftCertificateActionCreator,\n    GiftCertificateRequestSender,\n} from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator } from '../order';\nimport {\n    createPaymentClient,\n    createPaymentStrategyRegistry,\n    PaymentMethodActionCreator,\n    PaymentStrategyActionCreator,\n} from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport {\n    createShippingStrategyRegistry,\n    ConsignmentActionCreator,\n    ConsignmentRequestSender,\n    ShippingCountryActionCreator,\n    ShippingStrategyActionCreator,\n} from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutClient from './create-checkout-client';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const client = createCheckoutClient({ locale });\n    const store = createCheckoutStore({}, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const requestSender = createRequestSender();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const orderActionCreator = new OrderActionCreator(client, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(client),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender),\n        new CountryActionCreator(client),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, client)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(client),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, client, paymentClient),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(client),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, client))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    shouldWarnMutation?: boolean;\n}\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","module.exports = require(\"@bigcommerce/script-loader\");","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nexport default class StandardError extends Error {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        variantId: item.variantId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n}\n\nexport type BillingAddressAction =\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction | LoadConfigAction, InternalCheckoutSelectors> {\n        return store => merge(\n            this._configActionCreator.loadConfig()(store),\n            this._loadCheckout(id)\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._loadCheckout(context.checkoutId, options);\n            })\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateCheckoutAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this._loadCheckout(checkout.id, options);\n        });\n    }\n\n    private _loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return Observable.create((observer: Observer<LoadCheckoutAction>) => {\n            observer.next(createAction(CheckoutActionType.LoadCheckoutRequested));\n\n            this._checkoutRequestSender.loadCheckout(id, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.LoadCheckoutFailed, response));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport {\n    ConsignmentsRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\n\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: ['consignments.availableShippingOptions'],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction | UpdateConsignmentAction>) => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const checkout = store.getState().checkout.getCheckout();\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            this._createOrUpdateConsignment(checkout.id, consignment, observer, options);\n        });\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody | ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        if (this._isUpdateShippingOptionRequest(consignment)) {\n            return this._updateShippingOption(consignment, options);\n        }\n\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction | UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction | UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        observer: Observer<CreateConsignmentsAction | UpdateConsignmentAction>,\n        options?: RequestOptions\n    ) {\n        if ((consignment as ConsignmentUpdateRequestBody).id) {\n            const consignmentMeta = { id: (consignment as ConsignmentUpdateRequestBody).id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            return this._consignmentRequestSender.updateConsignment(\n                checkoutId,\n                consignment as ConsignmentUpdateRequestBody,\n                options\n            )\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateConsignmentSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateConsignmentFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        }\n\n        observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested, consignment));\n\n        return this._consignmentRequestSender.createConsignments(\n            checkoutId,\n            [consignment as ConsignmentCreateRequestBody],\n            options\n        )\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body, consignment));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response, consignment));\n            });\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _isUpdateShippingOptionRequest(request: ConsignmentUpdateRequestBody): request is ConsignmentShippingOptionRequestBody {\n        const shippingOptionRequest = request as ConsignmentShippingOptionRequestBody;\n\n        return typeof shippingOptionRequest.shippingOptionId !== 'undefined';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors, LoadCheckoutAction } from '../checkout';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction | LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const signInAction = new Observable((observer: Observer<SignInCustomerAction>) => {\n                observer.next(createAction(CustomerActionType.SignInCustomerRequested));\n\n                this._customerRequestSender.signInCustomer(credentials, options)\n                    .then(({ body }) => {\n                        observer.next(createAction(CustomerActionType.SignInCustomerSucceeded, body.data));\n                        observer.complete();\n                    })\n                    .catch(response => {\n                        observer.error(createErrorAction(CustomerActionType.SignInCustomerFailed, response));\n                    });\n            });\n\n            const loadCheckoutAction = this._checkoutActionCreator.loadCurrentCheckout(options)(store);\n\n            return concat(signInAction, loadCheckoutAction);\n        };\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction | LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const signOutAction = new Observable((observer: Observer<SignOutCustomerAction>) => {\n                observer.next(createAction(CustomerActionType.SignOutCustomerRequested));\n\n                this._customerRequestSender.signOutCustomer(options)\n                    .then(({ body }) => {\n                        observer.next(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data));\n                        observer.complete();\n                    })\n                    .catch(response => {\n                        observer.error(createErrorAction(CustomerActionType.SignOutCustomerFailed, response));\n                    });\n            });\n\n            const loadCheckoutAction = this._checkoutActionCreator.loadCurrentCheckout(options)(store);\n\n            return concat(signOutAction, loadCheckoutAction);\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","module.exports = require(\"rxjs/observable/defer\");","module.exports = require(\"rxjs/observable/from\");","module.exports = require(\"@bigcommerce/form-poster\");","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _dataCollector?: Promise<BraintreeDataCollector>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(): Promise<BraintreeDataCollector> {\n        if (!this._dataCollector) {\n            this._dataCollector = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true }))\n            .then(dataCollector => {\n                const { deviceData } = dataCollector;\n\n                return {\n                    ...dataCollector,\n                    deviceData: deviceData ? JSON.parse(deviceData).device_session_id : undefined,\n                };\n            })\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n        }\n\n        return this._dataCollector;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollector),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._dataCollector = undefined;\n            this._visaCheckout = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'payments',\n        'lineItems.physicalItems.socialMedia',\n        'lineItems.digitalItems.socialMedia',\n    ].join(','),\n};\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: DEFAULT_PARAMS,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.SubmitOrderSucceeded:\n        return undefined;\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function shippingCountryReducer(state: ShippingCountryState = DEFAULT_STATE, action: Action): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: ShippingCountryErrorsState = DEFAULT_STATE.errors, action: Action): ShippingCountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses, action: Action): ShippingCountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutClient, CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _checkoutClient: CheckoutClient,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._checkoutClient.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadCurrentOrderPayments(options?: RequestOptions): ThunkAction<LoadOrderPaymentsAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this._loadOrderPayments(orderId, options);\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | LoadOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            new Observable((observer: Observer<SubmitOrderAction>) => {\n                observer.next(createAction(OrderActionType.SubmitOrderRequested));\n\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                this._checkoutValidator.validate(checkout, options)\n                    .then(() => this._checkoutClient.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage), options))\n                    .then(response => {\n                        observer.next(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }));\n                        observer.complete();\n                    })\n                    .catch(response => {\n                        observer.error(createErrorAction(OrderActionType.SubmitOrderFailed, response));\n                    });\n            }),\n            // TODO: Remove once we can submit orders using storefront API\n            this.loadCurrentOrder(options)(store)\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            new Observable((observer: Observer<FinalizeOrderAction>) => {\n                observer.next(createAction(OrderActionType.FinalizeOrderRequested));\n\n                this._checkoutClient.finalizeOrder(orderId, options)\n                    .then(response => {\n                        observer.next(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data));\n                        observer.complete();\n                    })\n                    .catch(response => {\n                        observer.error(createErrorAction(OrderActionType.FinalizeOrderFailed, response));\n                    });\n            }),\n            // TODO: Remove once we can submit orders using storefront API\n            this.loadOrder(orderId, options)\n        );\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    private _loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._checkoutClient.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutClient } from '../checkout';\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './shipping-country-action-types';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _checkoutClient: CheckoutClient\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED));\n\n            this._checkoutClient.loadShippingCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutClient, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigRequestSender } from '../config';\nimport ConfigActionCreator from '../config/config-action-creator';\nimport { PaymentMethodActionCreator } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport { CustomerRequestSender, CustomerStrategyActionCreator } from '.';\nimport CustomerActionCreator from './customer-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n} from './strategies';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    client: CheckoutClient\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const requestSender = createRequestSender();\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        configActionCreator\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            new PaymentMethodActionCreator(client),\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender),\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            new PaymentMethodActionCreator(client),\n            new CustomerStrategyActionCreator(registry),\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender),\n            createBraintreeVisaCheckoutPaymentProcessor(getScriptLoader()),\n            new VisaCheckoutScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            new PaymentMethodActionCreator(client),\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender),\n            new ChasePayScriptLoader(getScriptLoader()),\n            requestSender,\n            createFormPoster()\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onOrderReferenceCreate: orderReference => {\n                    this._handleOrderReferenceCreate(orderReference);\n                },\n                onReady: () => {\n                    resolve();\n                    onReady();\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _handleOrderReferenceCreate(orderReference: AmazonPayOrderReference): void {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n        }\n\n        this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout(this._paymentMethod.id as 'amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     */\n    onReady?(): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutClient, CheckoutStore } from '../checkout';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport { ConsignmentRequestSender } from '.';\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    client: CheckoutClient\n): Registry<ShippingStrategy> {\n    const requestSender = createRequestSender();\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender),\n            new PaymentMethodActionCreator(client),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender)\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n\nexport function getDefaultLogger(): Logger {\n    return logger;\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/operators\");","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","module.exports = require(\"rxjs/observable/merge\");","module.exports = require(\"rxjs/observable/empty\");","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutClient } from '../checkout';\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './payment-method-action-types';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _checkoutClient: CheckoutClient\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_PAYMENT_METHODS_REQUESTED));\n\n            this._checkoutClient.loadPaymentMethods(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_PAYMENT_METHODS_SUCCEEDED, response.body.data, response.body.meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_PAYMENT_METHODS_FAILED, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_PAYMENT_METHOD_REQUESTED, undefined, { methodId }));\n\n            this._checkoutClient.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_PAYMENT_METHOD_SUCCEEDED, response.body.data, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_PAYMENT_METHOD_FAILED, response, { methodId }));\n                });\n        });\n    }\n}\n","module.exports = require(\"messageformat\");","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': 'This API endpoint is for internal use only and may change in the future',\n            },\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token: string = this._options.defaultToken, cacheToken: string = token): T {\n        try {\n            return this._getInstance(token, cacheToken);\n        } catch (error) {\n            return this._getInstance(this._options.defaultToken, cacheToken);\n        }\n    }\n\n    register(token: string, factory: Factory<T>): void {\n        if (this.hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this.hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_BILLING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_REMOTE_SETTINGS_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(actionTypes.UPDATE_REMOTE_CHECKOUT, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}) {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const requestSender = createRequestSender();\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}